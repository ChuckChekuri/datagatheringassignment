install.packages("rHealthDataGov")
data(resources)
data(resource$resources)
data(resources)
install.packages("rHealthDataGov")
library(rHealthDataGov)
data(resources)
resources
head(resources[,1:2])
resources[,1:2]
resources[,1:2]
df <- fetch_healthdata(resource = 'hacn', filter = NULL)
df
ddf <- fetch_healthdata(resource = 'hacn', filter = NULL)
library(httr)
set_config((config(ssl_verifypeer = 0L)))
ddf <- fetch_healthdata(resource = 'hacn', filter = NULL)
api_url <- "http://hub.Healthdata.gov/api/action/datastore_search"
req <- httr::POST(api_url, body = jsontext, httr::add_headers("Content-type" = "application/json"))
jsontext <- '{"resource_id":"21ebbda9-3218-40cb-89ee-af668185f694", "offset":0}'
req <- httr::POST(api_url, body = jsontext, httr::add_headers("Content-type" = "application/json"))
req$status_code
ddf <- fetch_healthdata(resource = "hacn", filter = NULL)
View(resources)
ddf <- fetch_healthdata(resource = "cacn", filter = NULL)
ddf <- fetch_healthdata(resource = "hosp", filter = NULL)
data()
data(esoph)
head(esoph)
summary(esoph)
require(stats)
require(graphics) # for mosaicplot
summary(esoph)
## effects of alcohol, tobacco and interaction, age-adjusted
model1 <- glm(cbind(ncases, ncontrols) ~ agegp + tobgp * alcgp,
data = esoph, family = binomial())
anova(model1)
## Try a linear effect of alcohol and tobacco
model2 <- glm(cbind(ncases, ncontrols) ~ agegp + unclass(tobgp)
+ unclass(alcgp),
data = esoph, family = binomial())
summary(model2)
## Re-arrange data for a mosaic plot
ttt <- table(esoph$agegp, esoph$alcgp, esoph$tobgp)
o <- with(esoph, order(tobgp, alcgp, agegp))
ttt[ttt == 1] <- esoph$ncases[o]
tt1 <- table(esoph$agegp, esoph$alcgp, esoph$tobgp)
tt1[tt1 == 1] <- esoph$ncontrols[o]
tt <- array(c(ttt, tt1), c(dim(ttt),2),
c(dimnames(ttt), list(c("Cancer", "control"))))
mosaicplot(tt, main = "esoph data set", color = TRUE)
model1
head(esoph)
plot(model1)
model1
plot(model1)
model2 <- glm(cbind(ncases, ncontrols) ~ agegp + unclass(tobgp)
+ unclass(alcgp),
data = esoph, family = binomial())
plot(model2)
plot(esoph)
summary(esoph)
describe(esoph)
esoph
hist(esoph$agegp,esoph$ncases)
hist(esoph$ncases,esoph$agegp)
hist(esoph$ncases,esoph$ncontrols)
plot(esoph$agegp,esoph$ncases)
plot(cbind(esoph$agegp,esoph$alcgp), esoph$ncases)
plot(rbind(esoph$agegp,esoph$alcgp), esoph$ncases)
plot(esoph$alcgp, esoph$ncases)
plot(esoph$alcgp, esoph$tobgp)
data(iris)
iris
mean(c(104,96,96,96,96,54,54))
mean(c(46,50,54,74,84,91,96,91,91,104,97))
mean(54,96,104)
mean(c(54,96,104))
hour-census <- c(
46,
46,
46,
46,
50,
50,
50,
54,
54,
54,
74,
74,
74,
74,
84,
84,
84,
84,
91,
91,
91,
91,
96,
96,
96,
96,
91,
91,
91,
91,
91,
91,
91,
104,
104,
104,
97,
97,
97)
hourcensus <- c(
46,
46,
46,
46,
50,
50,
50,
54,
54,
54,
74,
74,
74,
74,
84,
84,
84,
84,
91,
91,
91,
91,
96,
96,
96,
96,
91,
91,
91,
91,
91,
91,
91,
104,
104,
104,
97,
97,
97)
hourcensus
mean(hourcensus)
x <- c(46,50, 54, 74, 84, 91, 96, 91, 104,97)
mean(x)
mean(c(49,86,95))
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
# make this an external chunk that can be included in any file
options(width = 100)
#opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
options(xtable.type = 'html')
knit_hooks$set(inline = function(x) {
if(is.numeric(x)) {
round(x, getOption('digits'))
} else {
paste(as.character(x), collapse = ', ')
}
})
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)")
g = g + ylab("Price (SIN $)")
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
data(diamond)
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)")
g = g + ylab("Price (SIN $)")
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)")
g = g + ylab("Price (SIN $)")
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
plot(x, e,
xlab = "Mass (carats)",
ylab = "Residuals (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(e[i], 0), col = "red" , lwd = 2)
x = runif(100, -3, 3); y = x + sin(x) + rnorm(100, sd = .2);
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
g = ggplot(data.frame(x = x, y = resid(lm(y ~ x))),
aes(x = x, y = y))
g = g + geom_hline(yintercept = 0, size = 2);
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = g + xlab("X") + ylab("Residual")
g
x <- runif(100, 0, 6); y <- x + rnorm(100,  mean = 0, sd = .001 * x);
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
g = ggplot(data.frame(x = x, y = resid(lm(y ~ x))),
aes(x = x, y = y))
g = g + geom_hline(yintercept = 0, size = 2);
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = g + xlab("X") + ylab("Residual")
g
diamond$e <- resid(lm(price ~ carat, data = diamond))
g = ggplot(diamond, aes(x = carat, y = e))
g = g + xlab("Mass (carats)")
g = g + ylab("Residual price (SIN $)")
g = g + geom_hline(yintercept = 0, size = 2)
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
e = c(resid(lm(price ~ 1, data = diamond)),
resid(lm(price ~ carat, data = diamond)))
fit = factor(c(rep("Itc", nrow(diamond)),
rep("Itc, slope", nrow(diamond))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
e = c(resid(lm(price ~ 1, data = diamond)),
resid(lm(price ~ carat, data = diamond)))
fit = factor(c(rep("Itc", nrow(diamond)),
rep("Itc, slope", nrow(diamond))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
e = c(resid(lm(price ~ 1, data = diamond)),
resid(lm(price ~ carat, data = diamond)))
e
fit = factor(c(rep("Itc", nrow(diamond)),
rep("Itc, slope", nrow(diamond))))
summary(fit)
plot(fit)
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
summary(fit)$sigma
sqrt(sum(resid(fit)^2) / (n - 2))
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
xlim = c(3, 19), ylim = c(3, 13))
abline(mods[[i]], col = "blue")
}
mtext("Anscombe's 4 Regression data sets", outer = TRUE, cex = 1.5)
par(op)
require(stats); require(graphics); data(anscombe)
ff <- y ~ x
mods <- setNames(as.list(1:4), paste0("lm", 1:4))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
## or   ff[[2]] <- as.name(paste0("y", i))
##      ff[[3]] <- as.name(paste0("x", i))
mods[[i]] <- lmi <- lm(ff, data = anscombe)
#print(anova(lmi))
}
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
xlim = c(3, 19), ylim = c(3, 13))
abline(mods[[i]], col = "blue")
}
mtext("Anscombe's 4 Regression data sets", outer = TRUE, cex = 1.5)
par(op)
```
swirl()
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~  parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1 , trees2)
lapply(list(fit, fit2), coef)
all <- fit(Fertility ~ ., swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
lm(Fertility ~ . + ec, swiss)
efit <- lm(Fertility ~ . + ec, swiss)
coef(fit) - coef(efit)
all$coefficients - efit$coefficients
Sys.getlocale("LC_TIME")
library(lubridate)
help(package="lubridate")
help(package=lubridate)
today()
this_day <-today()
this_day
day(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
dmy("192012")
ymg("192012")
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tz)
with_tz(arrive, tzone = "HKZ")
with_tz(arrive, tzone = "HK")
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz="Singapore")
last_time
?interval()
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
source('~/GitHub/datasciencecoursera/UCI HAR Dataset/run_analysis.R')
head(allrecs)
write.table(allrecs, "measurements.csv")
source('~/GitHub/datasciencecoursera/UCI HAR Dataset/run_analysis.R')
?write.table
write.table(allrecs, "measurements.csv", row.names=FALSE, quote=FALSE)
write.table(allrecs, "measurements.csv", row.names=FALSE, quote=FALSE,sep=",")
grouped_means <- allrecs %>%
group_by(activity, subject) %>%
summarize(
AverageBodyAccMeanX=mean(`tBodyAcc-mean()-X`),
AverageBodyAccMeanY=mean(`tBodyAcc-mean()-Y`),
AverageBodyAccMeanZ=mean(`tBodyAcc-mean()-Z`),
AverageBodyAccStdX=mean(`tBodyAcc-std()-X`),
AverageBodyAccStdY=mean(`tBodyAcc-std()-Y`),
AverageBodyAccStdZ=mean(`tBodyAcc-std()-Z`)
)
write.table(grouped_means, "grouped_means.csv", row.names=FALSE, quote=FALSE,sep=",")
features <- read.table('./features.txt', header=FALSE,
stringsAsFactors = FALSE, nrows = 6)[,2]
colnames(allrecs) <- c("subject", "activity", features)
??codebook
??memisc
getwd()
?unzip
setwd("~/GitHub/datasciencecoursera/DataGatheringAssignment")
zipurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(zipurl, destfile = "data.zip", method="curl")
unz(data.zip)
unz("data.zip"")
```
""
unz("data.zip")
unzip("data.zip")
setwd("./UCI HAR Dataset")
